@require: list
@require: pervasives
@require: vdecoset
@require: annot

@import: util

let bib-left-padding = 20pt

let-mutable num-cite <- 0
let-mutable keys-cite <- []

let add-bib key = 
  let () = increment num-cite in
  let () = keys-cite <- (List.append !keys-cite [key]) in
    () % register-cross-reference (`bib-` ^ key) (arabic !num-cite)

let get-bib-number key =
  match ListUtil.find (string-same key) !keys-cite with 
  | Some(n) -> n + 1
  | None -> 
    let _ = add-bib key in
      List.length (!keys-cite)

let-inline ctx \cite-link num key = 
  let it = embed-string (arabic num) in
    read-inline ctx {\hyperlink(`bib-` ^ key){#it;}}

let-inline ctx \group-to-it group = 
  match group with
  | [] -> inline-nil
  | (num, key) :: [] -> read-inline ctx {\cite-link(num)(key);}
  | (num1, key1) :: (num2, key2) :: xs -> 
    (match ListUtil.tail xs with
    | Some(numlast, keylast) -> read-inline ctx {\cite-link(num1)(key1);â€“\cite-link(numlast)(keylast);}
    | None -> read-inline ctx {\cite-link(num1)(key1);, \cite-link(num2)(key2);}
    )

let-rec join-itlist ctx lst = 
  match lst with
  | [] -> {}
  | g :: [] -> {\group-to-it(g);}
  | g :: gs -> 
    let it = join-itlist ctx gs in
    {\group-to-it(g);,\ #it;}

let is-seq-num x y = 
  let (numx, _) = x in
  let (numy, _) = y in
    numy - numx == 1

let cite ctx style keys =
  let nums = List.map get-bib-number keys in
  let numkeys = ListUtil.quicksort (ListUtil.tuple-compare (>=)) (ListUtil.zip nums keys) in
  let groups = ListUtil.group-sequential is-seq-num [] numkeys in
  let it = join-itlist ctx groups in
    style ctx it

let key-same key x = 
  let (x1, x2) = x in
  if string-same key x1 then true else false

let key-to-bib bibliography key = 
  match ListUtil.find (key-same key) bibliography with
  | None -> 
  let warning = `Warning : \cite : '` ^ key ^ `' does not exist in biliography lists.` in
  let warning = warning ^ #` Skip in reference list.` in
  let () = display-message warning in 
    (0, None)
  | Some(n) -> (get-bib-number key, List.nth n bibliography)

let keys-to-bibs bibliography = 
  let bibs = List.map (key-to-bib bibliography) !keys-cite in
    ListUtil.quicksort (ListUtil.tuple-compare (>=)) bibs

let bib-entry ctx listing-style index key ib-main =
  let index-it = embed-string (arabic index) in
  let ib-num = read-inline ctx (listing-style index-it) in
  let linked-num = inline-frame-breakable (0pt, 0pt, 0pt, 0pt) (Annot.register-location-frame (`bib-` ^ key)) ib-num in
  let ib =
    inline-skip (0pt -' get-natural-width linked-num)
      ++ linked-num ++ ib-main ++ inline-fil
  in
  let pads = (bib-left-padding, 0pt, 0pt, 0pt) in
  block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> line-break true true ctx ib)

let make-list ctx listing-style item-style bibs = 
  bibs |> List.fold-left (fun bbacc (index, bib) -> (
    match bib with
    | Some(x) ->
      let it = item-style ctx x in
      let (key, _) = x in
        bbacc +++ bib-entry ctx listing-style index key it
    | None -> bbacc
  )) block-nil

let references ctx listing-style item-style bibliography = make-list ctx listing-style item-style (keys-to-bibs bibliography)